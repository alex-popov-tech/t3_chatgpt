import "~/styles/globals.css";

import { GeistSans } from "geist/font/sans";

import { TRPCReactProvider } from "~/trpc/react";
import { getServerAuthSession } from "~/server/auth";
import { AgitateSigninModal } from "./_components/agitateSigninModal";
import { SignOutButton } from "./_components/signOutButton";
import { Toast } from "./_components/toast";
import { api } from "~/trpc/server";
import Link from "next/link";

export const metadata = {
  title: "t3 ChatGPT",
  description: "Generated by create-t3-app",
  icons: [{ rel: "icon", url: "/favicon.ico" }],
};

export default async function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const session = await getServerAuthSession();
  const conversations = await api.conversation.list().catch((_) => null);
  return (
    <html lang="en" className={`${GeistSans.variable}`}>
      <body>
        <Toast />
        <TRPCReactProvider>
          <div className="grid h-screen grid-rows-[max-content_1fr] bg-gradient-to-b from-[#2e026d] to-[#15162c] px-4 py-3">
            <header className="drop-shadow-lg backdrop-blur-md">
              {session && (
                <div className="ml-auto flex w-fit items-center justify-center gap-4">
                  <p className="text-center text-xl text-white">
                    {session && <span>Logged in as {session.user?.name}</span>}
                  </p>
                  <SignOutButton />
                </div>
              )}
              {!session?.user && <AgitateSigninModal />}
            </header>
            <div className="flex gap-6 overflow-y-scroll">
              {!!conversations?.length && (
                <aside className="text-md mt-3 flex w-fit max-w-60 flex-col gap-4 text-white">
                  <Link href="/" className="mb-2 text-xl">
                    + Add new chat
                  </Link>
                  {conversations?.map((conv) => (
                    <Link
                      key={conv.id}
                      href={`/${conv.id}`}
                      className="truncate text-nowrap rounded-xl px-2 py-1 hover:bg-gray-500"
                    >
                      {conv.title}
                    </Link>
                  ))}
                </aside>
              )}
              <div
                style={{ scrollbarWidth: "none" }}
                className="grow overflow-y-scroll"
              >
                {children}
              </div>
            </div>
          </div>
        </TRPCReactProvider>
      </body>
    </html>
  );
}
